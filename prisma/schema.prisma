// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  username     String     @unique
  displayName  String
  email        String?    @unique
  avatarUrl    String?
  passwordHash String?
  googleId     String?    @unique
  bio          String?
  sessions     Session[]
  posts        Post[]
  bookmarks    Bookmark[]
  comments     Comment[]
  followers    Follow[]   @relation("Followers")
  following    Follow[]   @relation("Following")
  likes        Like[]
  payments     Payment[]
  role         String     @default("USER")
  isVerified   Boolean    @default(false)
  verifiedAt   DateTime?
  subscription Subscription?

  createdAt            DateTime       @default(now())
  receivedNotification Notification[] @relation("Recipient")
  issuedNotification   Notification[] @relation("Issuer")

  @@map("users")
}


model Payment {
  id               String     @id @default(uuid())
  user             User       @relation(fields: [userId], references: [id])
  userId           String
  amount           Float
  currency         String
  stripeSessionId  String     @unique
  status           String     @default("pending")
  paymentMethod    String?
  receiptUrl       String?
  verificationTier String?    // If you have multiple verification tiers
  createdAt        DateTime   @default(now())

  @@map("payments")
}

model Subscription {
  id                   String     @id @default(uuid())
  user                 User       @relation(fields: [userId], references: [id])
  userId               String     @unique  // Added @unique for one-to-one relation
  stripeCustomerId     String     @unique
  stripeSubscriptionId String     @unique
  status               String     @default("active")
  currentPeriodEnd     DateTime
  planId               String
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("subscriptions")
}

// Rest of your existing models remain unchanged
model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  @@map("sessions")
}

model Post {
  id                  String         @id @default(uuid())
  content             String
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments         Media[]
  likes               Like[]
  bookmarks           Bookmark[]
  comments            Comment[]
  weatherCode         Int?
  temperature         String?
  linkedNotifications Notification[]
  createdAt           DateTime       @default(now())
  @@map("posts")
}

model Media {
  id     String    @id @default(uuid())
  postId String?
  Post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type   MediaType
  url    String
  createdAt DateTime @default(now())
  @@map("postmedia")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  @@unique([followerId, followingId])
  @@map("follows")
}

model Comment {
  id      String @id @default(uuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@map("comments")
}

model Like {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(uuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  isRead      Boolean          @default(false)
  content     String?
  createdAt   DateTime         @default(now())
  @@map("notifications")
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  PAYMENT // You might want to add payment notifications
}